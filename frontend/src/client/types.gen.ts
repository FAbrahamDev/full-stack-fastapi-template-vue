// This file is auto-generated by @hey-api/openapi-ts

export type BodyLoginAccessToken = {
  grant_type?: string | null;
  username: string;
  password: string;
  scope?: string;
  client_id?: string | null;
  client_secret?: string | null;
};

export type HttpValidationError = {
  detail?: Array<ValidationError>;
};

export type ItemCreate = {
  title: string;
  description?: string | null;
};

export type ItemPublic = {
  title: string;
  description?: string | null;
  id: string;
  owner_id: string;
};

export type ItemUpdate = {
  title?: string | null;
  description?: string | null;
};

export type ItemsPublic = {
  data: Array<ItemPublic>;
  count: number;
};

export type Message = {
  message: string;
};

export type NewPassword = {
  token: string;
  new_password: string;
};

export type PrivateUserCreate = {
  email: string;
  password: string;
  full_name: string;
  is_verified?: boolean;
};

export type Token = {
  access_token: string;
  token_type?: string;
};

export type UpdatePassword = {
  current_password: string;
  new_password: string;
};

export type UserCreate = {
  email: string;
  is_active?: boolean;
  is_superuser?: boolean;
  full_name?: string | null;
  password: string;
};

export type UserPublic = {
  email: string;
  is_active?: boolean;
  is_superuser?: boolean;
  full_name?: string | null;
  id: string;
};

export type UserRegister = {
  email: string;
  password: string;
  full_name?: string | null;
};

export type UserUpdate = {
  email?: string | null;
  is_active?: boolean;
  is_superuser?: boolean;
  full_name?: string | null;
  password?: string | null;
};

export type UserUpdateMe = {
  full_name?: string | null;
  email?: string | null;
};

export type UsersPublic = {
  data: Array<UserPublic>;
  count: number;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type HttpException = {
  detail: string;
};

export type LoginAccessTokenData = {
  body: BodyLoginAccessToken;
  path?: never;
  query?: never;
  url: "/api/v1/login/access-token";
};

export type LoginAccessTokenErrors = {
  /**
   * Bad Request
   */
  400: HttpException;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type LoginAccessTokenError =
  LoginAccessTokenErrors[keyof LoginAccessTokenErrors];

export type LoginAccessTokenResponses = {
  /**
   * Successful Response
   */
  200: Token;
};

export type LoginAccessTokenResponse =
  LoginAccessTokenResponses[keyof LoginAccessTokenResponses];

export type LoginTestTokenData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/login/test-token";
};

export type LoginTestTokenErrors = {
  /**
   * Bad Request
   */
  400: HttpException;
};

export type LoginTestTokenError =
  LoginTestTokenErrors[keyof LoginTestTokenErrors];

export type LoginTestTokenResponses = {
  /**
   * Successful Response
   */
  200: UserPublic;
};

export type LoginTestTokenResponse =
  LoginTestTokenResponses[keyof LoginTestTokenResponses];

export type LoginRecoverPasswordData = {
  body?: never;
  path: {
    email: string;
  };
  query?: never;
  url: "/api/v1/password-recovery/{email}";
};

export type LoginRecoverPasswordErrors = {
  /**
   * Bad Request
   */
  400: HttpException;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type LoginRecoverPasswordError =
  LoginRecoverPasswordErrors[keyof LoginRecoverPasswordErrors];

export type LoginRecoverPasswordResponses = {
  /**
   * Successful Response
   */
  200: Message;
};

export type LoginRecoverPasswordResponse =
  LoginRecoverPasswordResponses[keyof LoginRecoverPasswordResponses];

export type LoginResetPasswordData = {
  body: NewPassword;
  path?: never;
  query?: never;
  url: "/api/v1/reset-password/";
};

export type LoginResetPasswordErrors = {
  /**
   * Bad Request
   */
  400: HttpException;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type LoginResetPasswordError =
  LoginResetPasswordErrors[keyof LoginResetPasswordErrors];

export type LoginResetPasswordResponses = {
  /**
   * Successful Response
   */
  200: Message;
};

export type LoginResetPasswordResponse =
  LoginResetPasswordResponses[keyof LoginResetPasswordResponses];

export type LoginRecoverPasswordHtmlContentData = {
  body?: never;
  path: {
    email: string;
  };
  query?: never;
  url: "/api/v1/password-recovery-html-content/{email}";
};

export type LoginRecoverPasswordHtmlContentErrors = {
  /**
   * Bad Request
   */
  400: HttpException;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type LoginRecoverPasswordHtmlContentError =
  LoginRecoverPasswordHtmlContentErrors[keyof LoginRecoverPasswordHtmlContentErrors];

export type LoginRecoverPasswordHtmlContentResponses = {
  /**
   * Successful Response
   */
  200: string;
};

export type LoginRecoverPasswordHtmlContentResponse =
  LoginRecoverPasswordHtmlContentResponses[keyof LoginRecoverPasswordHtmlContentResponses];

export type UsersReadUsersData = {
  body?: never;
  path?: never;
  query?: {
    skip?: number;
    limit?: number;
  };
  url: "/api/v1/users/";
};

export type UsersReadUsersErrors = {
  /**
   * Bad Request
   */
  400: HttpException;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UsersReadUsersError =
  UsersReadUsersErrors[keyof UsersReadUsersErrors];

export type UsersReadUsersResponses = {
  /**
   * Successful Response
   */
  200: UsersPublic;
};

export type UsersReadUsersResponse =
  UsersReadUsersResponses[keyof UsersReadUsersResponses];

export type UsersCreateUserData = {
  body: UserCreate;
  path?: never;
  query?: never;
  url: "/api/v1/users/";
};

export type UsersCreateUserErrors = {
  /**
   * Bad Request
   */
  400: HttpException;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UsersCreateUserError =
  UsersCreateUserErrors[keyof UsersCreateUserErrors];

export type UsersCreateUserResponses = {
  /**
   * Successful Response
   */
  200: UserPublic;
};

export type UsersCreateUserResponse =
  UsersCreateUserResponses[keyof UsersCreateUserResponses];

export type UsersDeleteUserMeData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/me";
};

export type UsersDeleteUserMeErrors = {
  /**
   * Bad Request
   */
  400: HttpException;
};

export type UsersDeleteUserMeError =
  UsersDeleteUserMeErrors[keyof UsersDeleteUserMeErrors];

export type UsersDeleteUserMeResponses = {
  /**
   * Successful Response
   */
  200: Message;
};

export type UsersDeleteUserMeResponse =
  UsersDeleteUserMeResponses[keyof UsersDeleteUserMeResponses];

export type UsersReadUserMeData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/me";
};

export type UsersReadUserMeErrors = {
  /**
   * Bad Request
   */
  400: HttpException;
};

export type UsersReadUserMeError =
  UsersReadUserMeErrors[keyof UsersReadUserMeErrors];

export type UsersReadUserMeResponses = {
  /**
   * Successful Response
   */
  200: UserPublic;
};

export type UsersReadUserMeResponse =
  UsersReadUserMeResponses[keyof UsersReadUserMeResponses];

export type UsersUpdateUserMeData = {
  body: UserUpdateMe;
  path?: never;
  query?: never;
  url: "/api/v1/users/me";
};

export type UsersUpdateUserMeErrors = {
  /**
   * Bad Request
   */
  400: HttpException;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UsersUpdateUserMeError =
  UsersUpdateUserMeErrors[keyof UsersUpdateUserMeErrors];

export type UsersUpdateUserMeResponses = {
  /**
   * Successful Response
   */
  200: UserPublic;
};

export type UsersUpdateUserMeResponse =
  UsersUpdateUserMeResponses[keyof UsersUpdateUserMeResponses];

export type UsersUpdatePasswordMeData = {
  body: UpdatePassword;
  path?: never;
  query?: never;
  url: "/api/v1/users/me/password";
};

export type UsersUpdatePasswordMeErrors = {
  /**
   * Bad Request
   */
  400: HttpException;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UsersUpdatePasswordMeError =
  UsersUpdatePasswordMeErrors[keyof UsersUpdatePasswordMeErrors];

export type UsersUpdatePasswordMeResponses = {
  /**
   * Successful Response
   */
  200: Message;
};

export type UsersUpdatePasswordMeResponse =
  UsersUpdatePasswordMeResponses[keyof UsersUpdatePasswordMeResponses];

export type UsersRegisterUserData = {
  body: UserRegister;
  path?: never;
  query?: never;
  url: "/api/v1/users/signup";
};

export type UsersRegisterUserErrors = {
  /**
   * Bad Request
   */
  400: HttpException;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UsersRegisterUserError =
  UsersRegisterUserErrors[keyof UsersRegisterUserErrors];

export type UsersRegisterUserResponses = {
  /**
   * Successful Response
   */
  200: UserPublic;
};

export type UsersRegisterUserResponse =
  UsersRegisterUserResponses[keyof UsersRegisterUserResponses];

export type UsersDeleteUserData = {
  body?: never;
  path: {
    user_id: string;
  };
  query?: never;
  url: "/api/v1/users/{user_id}";
};

export type UsersDeleteUserErrors = {
  /**
   * Bad Request
   */
  400: HttpException;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UsersDeleteUserError =
  UsersDeleteUserErrors[keyof UsersDeleteUserErrors];

export type UsersDeleteUserResponses = {
  /**
   * Successful Response
   */
  200: Message;
};

export type UsersDeleteUserResponse =
  UsersDeleteUserResponses[keyof UsersDeleteUserResponses];

export type UsersReadUserByIdData = {
  body?: never;
  path: {
    user_id: string;
  };
  query?: never;
  url: "/api/v1/users/{user_id}";
};

export type UsersReadUserByIdErrors = {
  /**
   * Bad Request
   */
  400: HttpException;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UsersReadUserByIdError =
  UsersReadUserByIdErrors[keyof UsersReadUserByIdErrors];

export type UsersReadUserByIdResponses = {
  /**
   * Successful Response
   */
  200: UserPublic;
};

export type UsersReadUserByIdResponse =
  UsersReadUserByIdResponses[keyof UsersReadUserByIdResponses];

export type UsersUpdateUserData = {
  body: UserUpdate;
  path: {
    user_id: string;
  };
  query?: never;
  url: "/api/v1/users/{user_id}";
};

export type UsersUpdateUserErrors = {
  /**
   * Bad Request
   */
  400: HttpException;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UsersUpdateUserError =
  UsersUpdateUserErrors[keyof UsersUpdateUserErrors];

export type UsersUpdateUserResponses = {
  /**
   * Successful Response
   */
  200: UserPublic;
};

export type UsersUpdateUserResponse =
  UsersUpdateUserResponses[keyof UsersUpdateUserResponses];

export type UtilsTestEmailData = {
  body?: never;
  path?: never;
  query: {
    email_to: string;
  };
  url: "/api/v1/utils/test-email/";
};

export type UtilsTestEmailErrors = {
  /**
   * Bad Request
   */
  400: HttpException;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UtilsTestEmailError =
  UtilsTestEmailErrors[keyof UtilsTestEmailErrors];

export type UtilsTestEmailResponses = {
  /**
   * Successful Response
   */
  201: Message;
};

export type UtilsTestEmailResponse =
  UtilsTestEmailResponses[keyof UtilsTestEmailResponses];

export type UtilsHealthCheckData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/utils/health-check/";
};

export type UtilsHealthCheckErrors = {
  /**
   * Bad Request
   */
  400: HttpException;
};

export type UtilsHealthCheckError =
  UtilsHealthCheckErrors[keyof UtilsHealthCheckErrors];

export type UtilsHealthCheckResponses = {
  /**
   * Successful Response
   */
  200: boolean;
};

export type UtilsHealthCheckResponse =
  UtilsHealthCheckResponses[keyof UtilsHealthCheckResponses];

export type ItemsReadItemsData = {
  body?: never;
  path?: never;
  query?: {
    skip?: number;
    limit?: number;
  };
  url: "/api/v1/items/";
};

export type ItemsReadItemsErrors = {
  /**
   * Bad Request
   */
  400: HttpException;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ItemsReadItemsError =
  ItemsReadItemsErrors[keyof ItemsReadItemsErrors];

export type ItemsReadItemsResponses = {
  /**
   * Successful Response
   */
  200: ItemsPublic;
};

export type ItemsReadItemsResponse =
  ItemsReadItemsResponses[keyof ItemsReadItemsResponses];

export type ItemsCreateItemData = {
  body: ItemCreate;
  path?: never;
  query?: never;
  url: "/api/v1/items/";
};

export type ItemsCreateItemErrors = {
  /**
   * Bad Request
   */
  400: HttpException;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ItemsCreateItemError =
  ItemsCreateItemErrors[keyof ItemsCreateItemErrors];

export type ItemsCreateItemResponses = {
  /**
   * Successful Response
   */
  200: ItemPublic;
};

export type ItemsCreateItemResponse =
  ItemsCreateItemResponses[keyof ItemsCreateItemResponses];

export type ItemsDeleteItemData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/items/{id}";
};

export type ItemsDeleteItemErrors = {
  /**
   * Bad Request
   */
  400: HttpException;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ItemsDeleteItemError =
  ItemsDeleteItemErrors[keyof ItemsDeleteItemErrors];

export type ItemsDeleteItemResponses = {
  /**
   * Successful Response
   */
  200: Message;
};

export type ItemsDeleteItemResponse =
  ItemsDeleteItemResponses[keyof ItemsDeleteItemResponses];

export type ItemsReadItemData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/items/{id}";
};

export type ItemsReadItemErrors = {
  /**
   * Bad Request
   */
  400: HttpException;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ItemsReadItemError = ItemsReadItemErrors[keyof ItemsReadItemErrors];

export type ItemsReadItemResponses = {
  /**
   * Successful Response
   */
  200: ItemPublic;
};

export type ItemsReadItemResponse =
  ItemsReadItemResponses[keyof ItemsReadItemResponses];

export type ItemsUpdateItemData = {
  body: ItemUpdate;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/items/{id}";
};

export type ItemsUpdateItemErrors = {
  /**
   * Bad Request
   */
  400: HttpException;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ItemsUpdateItemError =
  ItemsUpdateItemErrors[keyof ItemsUpdateItemErrors];

export type ItemsUpdateItemResponses = {
  /**
   * Successful Response
   */
  200: ItemPublic;
};

export type ItemsUpdateItemResponse =
  ItemsUpdateItemResponses[keyof ItemsUpdateItemResponses];

export type PrivateCreateUserData = {
  body: PrivateUserCreate;
  path?: never;
  query?: never;
  url: "/api/v1/private/users/";
};

export type PrivateCreateUserErrors = {
  /**
   * Bad Request
   */
  400: HttpException;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type PrivateCreateUserError =
  PrivateCreateUserErrors[keyof PrivateCreateUserErrors];

export type PrivateCreateUserResponses = {
  /**
   * Successful Response
   */
  200: UserPublic;
};

export type PrivateCreateUserResponse =
  PrivateCreateUserResponses[keyof PrivateCreateUserResponses];
