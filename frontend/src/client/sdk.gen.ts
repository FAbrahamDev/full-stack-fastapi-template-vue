// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
  urlSearchParamsBodySerializer,
} from "@hey-api/client-axios";
import type {
  LoginAccessTokenData,
  LoginAccessTokenResponse,
  LoginAccessTokenError,
  LoginTestTokenData,
  LoginTestTokenResponse,
  LoginTestTokenError,
  LoginRecoverPasswordData,
  LoginRecoverPasswordResponse,
  LoginRecoverPasswordError,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  LoginResetPasswordError,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentResponse,
  LoginRecoverPasswordHtmlContentError,
  UsersReadUsersData,
  UsersReadUsersResponse,
  UsersReadUsersError,
  UsersCreateUserData,
  UsersCreateUserResponse,
  UsersCreateUserError,
  UsersDeleteUserMeData,
  UsersDeleteUserMeResponse,
  UsersDeleteUserMeError,
  UsersReadUserMeData,
  UsersReadUserMeResponse,
  UsersReadUserMeError,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponse,
  UsersUpdateUserMeError,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeResponse,
  UsersUpdatePasswordMeError,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
  UsersRegisterUserError,
  UsersDeleteUserData,
  UsersDeleteUserResponse,
  UsersDeleteUserError,
  UsersReadUserByIdData,
  UsersReadUserByIdResponse,
  UsersReadUserByIdError,
  UsersUpdateUserData,
  UsersUpdateUserResponse,
  UsersUpdateUserError,
  UtilsTestEmailData,
  UtilsTestEmailResponse,
  UtilsTestEmailError,
  UtilsHealthCheckData,
  UtilsHealthCheckResponse,
  UtilsHealthCheckError,
  ItemsReadItemsData,
  ItemsReadItemsResponse,
  ItemsReadItemsError,
  ItemsCreateItemData,
  ItemsCreateItemResponse,
  ItemsCreateItemError,
  ItemsDeleteItemData,
  ItemsDeleteItemResponse,
  ItemsDeleteItemError,
  ItemsReadItemData,
  ItemsReadItemResponse,
  ItemsReadItemError,
  ItemsUpdateItemData,
  ItemsUpdateItemResponse,
  ItemsUpdateItemError,
  PrivateCreateUserData,
  PrivateCreateUserResponse,
  PrivateCreateUserError,
} from "./types.gen";

export const client = createClient(createConfig());

export class LoginService {
  /**
   * Access Token
   * OAuth2 compatible token login, get an access token for future requests
   */
  public static loginAccessToken<ThrowOnError extends boolean = false>(
    options: Options<LoginAccessTokenData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      LoginAccessTokenResponse,
      LoginAccessTokenError,
      ThrowOnError
    >({
      ...urlSearchParamsBodySerializer,
      url: "/api/v1/login/access-token",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    });
  }

  /**
   * Test Token
   * Test access token
   */
  public static loginTestToken<ThrowOnError extends boolean = false>(
    options?: Options<LoginTestTokenData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      LoginTestTokenResponse,
      LoginTestTokenError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/login/test-token",
      ...options,
    });
  }

  /**
   * Recover Password
   * Password Recovery
   */
  public static loginRecoverPassword<ThrowOnError extends boolean = false>(
    options: Options<LoginRecoverPasswordData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      LoginRecoverPasswordResponse,
      LoginRecoverPasswordError,
      ThrowOnError
    >({
      url: "/api/v1/password-recovery/{email}",
      ...options,
    });
  }

  /**
   * Reset Password
   * Reset password
   */
  public static loginResetPassword<ThrowOnError extends boolean = false>(
    options: Options<LoginResetPasswordData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      LoginResetPasswordResponse,
      LoginResetPasswordError,
      ThrowOnError
    >({
      url: "/api/v1/reset-password/",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  /**
   * Recover Password Html Content
   * HTML Content for Password Recovery
   */
  public static loginRecoverPasswordHtmlContent<
    ThrowOnError extends boolean = false,
  >(options: Options<LoginRecoverPasswordHtmlContentData, ThrowOnError>) {
    return (options?.client ?? client).post<
      LoginRecoverPasswordHtmlContentResponse,
      LoginRecoverPasswordHtmlContentError,
      ThrowOnError
    >({
      responseType: "text",
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/password-recovery-html-content/{email}",
      ...options,
    });
  }
}

export class UsersService {
  /**
   * Read Users
   * Retrieve users.
   */
  public static usersReadUsers<ThrowOnError extends boolean = false>(
    options?: Options<UsersReadUsersData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      UsersReadUsersResponse,
      UsersReadUsersError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/users/",
      ...options,
    });
  }

  /**
   * Create User
   * Create new user.
   */
  public static usersCreateUser<ThrowOnError extends boolean = false>(
    options: Options<UsersCreateUserData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      UsersCreateUserResponse,
      UsersCreateUserError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/users/",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  /**
   * Delete User Me
   * Delete own user.
   */
  public static usersDeleteUserMe<ThrowOnError extends boolean = false>(
    options?: Options<UsersDeleteUserMeData, ThrowOnError>,
  ) {
    return (options?.client ?? client).delete<
      UsersDeleteUserMeResponse,
      UsersDeleteUserMeError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/users/me",
      ...options,
    });
  }

  /**
   * Read User Me
   * Get current user.
   */
  public static usersReadUserMe<ThrowOnError extends boolean = false>(
    options?: Options<UsersReadUserMeData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      UsersReadUserMeResponse,
      UsersReadUserMeError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/users/me",
      ...options,
    });
  }

  /**
   * Update User Me
   * Update own user.
   */
  public static usersUpdateUserMe<ThrowOnError extends boolean = false>(
    options: Options<UsersUpdateUserMeData, ThrowOnError>,
  ) {
    return (options?.client ?? client).patch<
      UsersUpdateUserMeResponse,
      UsersUpdateUserMeError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/users/me",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  /**
   * Update Password Me
   * Update own password.
   */
  public static usersUpdatePasswordMe<ThrowOnError extends boolean = false>(
    options: Options<UsersUpdatePasswordMeData, ThrowOnError>,
  ) {
    return (options?.client ?? client).patch<
      UsersUpdatePasswordMeResponse,
      UsersUpdatePasswordMeError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/users/me/password",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  /**
   * Register User
   * Create new user without the need to be logged in.
   */
  public static usersRegisterUser<ThrowOnError extends boolean = false>(
    options: Options<UsersRegisterUserData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      UsersRegisterUserResponse,
      UsersRegisterUserError,
      ThrowOnError
    >({
      url: "/api/v1/users/signup",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  /**
   * Delete User
   * Delete a user.
   */
  public static usersDeleteUser<ThrowOnError extends boolean = false>(
    options: Options<UsersDeleteUserData, ThrowOnError>,
  ) {
    return (options?.client ?? client).delete<
      UsersDeleteUserResponse,
      UsersDeleteUserError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/users/{user_id}",
      ...options,
    });
  }

  /**
   * Read User By Id
   * Get a specific user by id.
   */
  public static usersReadUserById<ThrowOnError extends boolean = false>(
    options: Options<UsersReadUserByIdData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      UsersReadUserByIdResponse,
      UsersReadUserByIdError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/users/{user_id}",
      ...options,
    });
  }

  /**
   * Update User
   * Update a user.
   */
  public static usersUpdateUser<ThrowOnError extends boolean = false>(
    options: Options<UsersUpdateUserData, ThrowOnError>,
  ) {
    return (options?.client ?? client).patch<
      UsersUpdateUserResponse,
      UsersUpdateUserError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/users/{user_id}",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }
}

export class UtilsService {
  /**
   * Test Email
   * Test emails.
   */
  public static utilsTestEmail<ThrowOnError extends boolean = false>(
    options: Options<UtilsTestEmailData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      UtilsTestEmailResponse,
      UtilsTestEmailError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/utils/test-email/",
      ...options,
    });
  }

  /**
   * Health Check
   */
  public static utilsHealthCheck<ThrowOnError extends boolean = false>(
    options?: Options<UtilsHealthCheckData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      UtilsHealthCheckResponse,
      UtilsHealthCheckError,
      ThrowOnError
    >({
      url: "/api/v1/utils/health-check/",
      ...options,
    });
  }
}

export class ItemsService {
  /**
   * Read Items
   * Retrieve items.
   */
  public static itemsReadItems<ThrowOnError extends boolean = false>(
    options?: Options<ItemsReadItemsData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      ItemsReadItemsResponse,
      ItemsReadItemsError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/items/",
      ...options,
    });
  }

  /**
   * Create Item
   * Create new item.
   */
  public static itemsCreateItem<ThrowOnError extends boolean = false>(
    options: Options<ItemsCreateItemData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      ItemsCreateItemResponse,
      ItemsCreateItemError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/items/",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  /**
   * Delete Item
   * Delete an item.
   */
  public static itemsDeleteItem<ThrowOnError extends boolean = false>(
    options: Options<ItemsDeleteItemData, ThrowOnError>,
  ) {
    return (options?.client ?? client).delete<
      ItemsDeleteItemResponse,
      ItemsDeleteItemError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/items/{id}",
      ...options,
    });
  }

  /**
   * Read Item
   * Get item by ID.
   */
  public static itemsReadItem<ThrowOnError extends boolean = false>(
    options: Options<ItemsReadItemData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      ItemsReadItemResponse,
      ItemsReadItemError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/items/{id}",
      ...options,
    });
  }

  /**
   * Update Item
   * Update an item.
   */
  public static itemsUpdateItem<ThrowOnError extends boolean = false>(
    options: Options<ItemsUpdateItemData, ThrowOnError>,
  ) {
    return (options?.client ?? client).put<
      ItemsUpdateItemResponse,
      ItemsUpdateItemError,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/api/v1/items/{id}",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }
}

export class PrivateService {
  /**
   * Create User
   * Create a new user.
   */
  public static privateCreateUser<ThrowOnError extends boolean = false>(
    options: Options<PrivateCreateUserData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      PrivateCreateUserResponse,
      PrivateCreateUserError,
      ThrowOnError
    >({
      url: "/api/v1/private/users/",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }
}
